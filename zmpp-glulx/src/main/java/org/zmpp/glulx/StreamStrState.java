/*
 * Created on 2012/02/15
 * Copyright (c) 2010-2012, Wei-ju Wu.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * Neither the name of Wei-ju Wu nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package org.zmpp.glulx;

import java.util.logging.*;

class StreamStrState {
    public static final int StatusNew             = 0;
    public static final int StatusContinue        = 1;
    public static final int StatusCallFunction    = 2;
    public static final int StatusSubstring       = 3;
    public static final int StatusFinished        = 4;
    public static final int StatusResume          = 5;
    public static final int StatusResumeCString   = 6; // this state is generated by FilterIO
    public static final int StatusResumeUniString = 7; // this state is generated by FilterIO 

  // parameterizable singletons
    private static StreamStrState _newString        = new StreamStrState(StatusNew);
    private static StreamStrState _substring        = new StreamStrState(StatusSubstring);
    private static StreamStrState _resume           = new StreamStrState(StatusResume);
    private static StreamStrState _resumecstring    = new StreamStrState(StatusResumeCString);
    private static StreamStrState _resumeunistring  = new StreamStrState(StatusResumeUniString);

    public static StreamStrState Continue     = new StreamStrState(StatusContinue);
    public static StreamStrState Finished     = new StreamStrState(StatusFinished);
    public static StreamStrState CallFunction = new StreamStrState(StatusCallFunction);

    public int status;
    public int byteAddress;
    public int bitnum;

    public StreamStrState(int status, int byteAdress, int bitnum) {
        this.status      = status;
        this.byteAddress = byteAddress;
        this.bitnum      = bitnum;
    }
    public StreamStrState(int status) { this(status, 0, 0); }

    public boolean startString() { return status == StatusNew; }
    public boolean printSubstring() { return status == StatusSubstring; }
    public boolean resumeDecoding() { return status == StatusResume; }
    public boolean resumeCString() { return status == StatusResumeCString; }
    public boolean resumeUniString() { return status == StatusResumeUniString; }
    public boolean suspendPrinting() {
        return status == StatusFinished || status == StatusCallFunction;
    }

    public static StreamStrState newString(int addr) {
        _newString.byteAddress = addr;
        return _newString;
    }

    public static StreamStrState substring(int byteAddr) {
        _substring.byteAddress = byteAddr;
        _substring.bitnum      = 0;
        return _substring;
    }

    public static StreamStrState resumeAt(int byteAddr, int bitnum) {
        _resume.byteAddress = byteAddr;
        _resume.bitnum      = bitnum;
        return _resume;
    }

    public static StreamStrState resumeCStringAt(int byteAddr) {
        _resumecstring.byteAddress = byteAddr;
        return _resumecstring;
    }

    public static StreamStrState resumeUniStringAt(int byteAddr) {
        _resumeunistring.byteAddress = byteAddr;
        return _resumeunistring;
    }
}
